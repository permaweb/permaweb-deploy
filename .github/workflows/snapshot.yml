name: Snapshot Release

on:
  pull_request:
    branches:
      - main
      - alpha
    types:
      - opened
      - synchronize
      - reopened

jobs:
  snapshot:
    name: Snapshot Release
    runs-on: ubuntu-latest
    # Skip snapshot releases for alpha <-> main PRs (promotion/backport)
    if: |
      !((github.event.pull_request.base.ref == 'main' && github.event.pull_request.head.ref == 'alpha') ||
        (github.event.pull_request.base.ref == 'alpha' && github.event.pull_request.head.ref == 'main'))

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ github.event.pull_request.head.ref }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          registry-url: "https://registry.npmjs.org"

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 8

      - name: Get pnpm store directory
        id: pnpm-cache
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install

      - name: Build
        run: pnpm build

      - name: Create snapshot release
        run: |
          pnpm changeset version --snapshot rc
          pnpm changeset publish --tag rc --no-git-tag
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Get Package Version
        id: package-version
        if: success()
        run: |
          VERSION=$(node -p "require('./package.json').version")
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Comment PR with snapshot version
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const pkg = JSON.parse(fs.readFileSync('package.json', 'utf8'));
            const version = pkg.version;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `ðŸš€ Snapshot release published: \`${pkg.name}@${version}\`\n\nInstall with:\n\`\`\`bash\npnpm add ${pkg.name}@${version}\n\`\`\``
            })

      - name: Slack Notification on Success
        if: success()
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_CHANNEL: permaweb-deploy
          SLACK_COLOR: "#FFA500"
          SLACK_ICON_EMOJI: ":test_tube:"
          SLACK_TITLE: Snapshot Release Published
          SLACK_MESSAGE: |
            Version: ${{ steps.package-version.outputs.version }}
            PR: #${{ github.event.pull_request.number }} - ${{ github.event.pull_request.title }}
            Author: ${{ github.event.pull_request.user.login }}
          SLACK_FOOTER: "permaweb-deploy"
          SLACK_USERNAME: GitHub Actions

      - name: Slack Notification on Failure
        if: failure()
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_CHANNEL: permaweb-deploy
          SLACK_COLOR: danger
          SLACK_ICON_EMOJI: ":x:"
          SLACK_TITLE: Snapshot Release Failed
          SLACK_MESSAGE: |
            PR: #${{ github.event.pull_request.number }} - ${{ github.event.pull_request.title }}
            Author: ${{ github.event.pull_request.user.login }}
          SLACK_FOOTER: "permaweb-deploy"
          SLACK_USERNAME: GitHub Actions
